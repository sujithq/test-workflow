name: Reusable Dependabot Keep-Alive

on:
  workflow_call:
    inputs:
      runs-on:
        description: 'Runner labels as JSON array'
        required: false
        type: string
        default: '["ubuntu-latest"]'
      team-handle:
        description: 'Optional team mention'
        required: false
        type: string
        default: '@sujithq-org/dependency-maintainers'
      org:
        description: 'Organization to scan (if different from current repo owner)'
        required: false
        type: string
        default: ''
      scan-mode:
        description: 'Mode: "single" (current repo only) or "org" (all org repos with dependabot)'
        required: false
        type: string
        default: 'single'
      repo-includes:
        description: 'Comma-separated repo patterns to include (org mode only)'
        required: false
        type: string
        default: ''
      repo-excludes:
        description: 'Comma-separated repo patterns to exclude (org mode only)'  
        required: false
        type: string
        default: ''

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  keepalive:
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    steps:
      - name: Discover repositories
        id: discover
        env:
          GH_TOKEN: ${{ inputs.scan-mode == 'org' && secrets.ORG_READ_TOKEN || secrets.GITHUB_TOKEN }}
          SCAN_MODE: ${{ inputs.scan-mode }}
          ORG: ${{ inputs.org || github.repository_owner }}
          REPO_INCLUDES: ${{ inputs.repo-includes }}
          REPO_EXCLUDES: ${{ inputs.repo-excludes }}
        shell: bash
        run: |
          set -eo pipefail
          
          # Function to check if repo matches include/exclude patterns
          matches_pattern() {
            local repo="$1"
            local patterns="$2"
            
            [[ -z "$patterns" ]] && return 0
            
            IFS=',' read -ra PATTERN_ARRAY <<< "$patterns"
            for pattern in "${PATTERN_ARRAY[@]}"; do
              pattern=$(echo "$pattern" | xargs)  # trim whitespace
              [[ -z "$pattern" ]] && continue
              
              if [[ "$repo" == $pattern ]]; then
                return 0
              fi
            done
            return 1
          }

          should_include_repo() {
            local repo="$1"
            
            # If includes list is specified, repo must match at least one include pattern
            if [[ -n "$REPO_INCLUDES" ]]; then
              if ! matches_pattern "$repo" "$REPO_INCLUDES"; then
                return 1
              fi
            fi
            
            # If excludes list is specified, repo must not match any exclude pattern
            if [[ -n "$REPO_EXCLUDES" ]]; then
              if matches_pattern "$repo" "$REPO_EXCLUDES"; then
                return 1
              fi
            fi
            
            return 0
          }
          
          if [[ "$SCAN_MODE" == "single" ]]; then
            echo "üéØ Single repository mode: $GITHUB_REPOSITORY"
            echo "repos=$GITHUB_REPOSITORY" >> "$GITHUB_OUTPUT"
          else
            echo "üîç Organization mode: Scanning $ORG for Dependabot-enabled repositories"
            
            # Use GitHub search API to find repos with dependabot.yml files
            search_query="org:${ORG}+path:.github+filename:dependabot.yml"
            repos_with_dependabot="$(gh api "search/code?q=${search_query}" --jq '.items[].repository.full_name' | sort -u || true)"
            
            if [[ -z "$repos_with_dependabot" ]]; then
              echo "‚ö†Ô∏è No repositories found with Dependabot configuration"
              echo "repos=" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            
            # Apply filters
            filtered_repos=""
            while IFS= read -r full_repo; do
              [[ -z "$full_repo" ]] && continue
              repo_name="${full_repo#*/}"  # Extract repo name after org/
              
              if should_include_repo "$repo_name"; then
                filtered_repos+="$full_repo "
              else
                echo "‚è≠Ô∏è Skipping $full_repo (filtered out)"
              fi
            done <<< "$repos_with_dependabot"
            
            repo_count=$(echo "$filtered_repos" | wc -w)
            echo "üìä Found $repo_count repositories to process"
            echo "repos=$filtered_repos" >> "$GITHUB_OUTPUT"
          fi

      - name: Process repositories
        env:
          GH_TOKEN: ${{ inputs.scan-mode == 'org' && secrets.ORG_READ_TOKEN || secrets.GITHUB_TOKEN }}
          REPOS: ${{ steps.discover.outputs.repos }}
        shell: bash
        run: |
          set -eo pipefail
          
          [[ -z "$REPOS" ]] && { echo "No repositories to process"; exit 0; }
          
          total_prs=0
          total_issues=0
          
          for repo in $REPOS; do
            echo "üîÑ Processing $repo"
            
            # Find open Dependabot PR
            pr_number="$(gh pr list -R "$repo" --author "dependabot[bot]" --state open --json number -q '.[0].number' || true)"
            
            if [ -n "${pr_number:-}" ]; then
              echo "  üìå Found PR #$pr_number - nudging with rebase"
              gh pr comment -R "$repo" "$pr_number" --body "@dependabot rebase" || echo "  ‚ö†Ô∏è Failed to comment on PR"
              ((total_prs++))
            else
              echo "  üìù No open PRs - creating reminder issue"
              
              mention="${{ inputs.team-handle }}"
              body="$mention

          No open Dependabot PRs found in $repo.

          Action: Press **Insights ‚Üí Dependency graph ‚Üí Dependabot ‚Üí Recent update jobs ‚Üí Check for updates** in the UI."
              
              existing="$(gh issue list -R "$repo" --search "Dependabot keep-alive in:title" --json number -q '.[0].number' || true)"
              if [ -n "${existing:-}" ]; then
                gh issue comment -R "$repo" "$existing" --body "$body" || echo "  ‚ö†Ô∏è Failed to comment on issue"
              else
                # Check if 'dependencies' label exists
                label_exists="$(gh api repos/$repo/labels/dependencies --silent 2>/dev/null && echo "true" || echo "false")"
                if [ "$label_exists" = "true" ]; then
                  gh issue create -R "$repo" --title "Dependabot keep-alive" --body "$body" --label "dependencies" || echo "  ‚ö†Ô∏è Failed to create issue"
                else
                  echo "  ‚ÑπÔ∏è 'dependencies' label not found, creating issue without label"
                  gh issue create -R "$repo" --title "Dependabot keep-alive" --body "$body" || echo "  ‚ö†Ô∏è Failed to create issue"
                fi
              fi
              ((total_issues++))
            fi
          done
          
          echo "üìä Summary: Nudged $total_prs PRs, created/updated $total_issues issues"

