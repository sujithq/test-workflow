name: Dependabot Watchdog (org report, flexible + dry-run)

on:
  schedule:
    - cron: "0 1 * * *"
  workflow_dispatch:
    inputs:
      org:
        description: 'Organization name'
        required: false
        default: 'sujithq'
      runner:
        description: 'JSON array of runner labels'
        required: false
        default: '["ubuntu-latest"]'
      dry-run:
        description: 'If true, only writes a job summary (no issue).'
        required: false
        type: boolean
        default: true
      cutoff-days:
        description: 'Cutoff days for inactivity'
        required: false
        type: number
        default: 75
      team-handle:
        description: 'team handle to mention in the issue'
        required: false
        default: '@sujithq-org/dependency-maintainers'        
permissions:
  contents: read
  issues: write

env:
  ORG: ${{ fromJSON(github.event_name == 'workflow_dispatch' && inputs.org || 'sujithq') }}
  TEAM_HANDLE: ${{ fromJSON(github.event_name == 'workflow_dispatch' && inputs['team-handle'] || '@sujithq-org/dependency-maintainers') }}
  CUTOFF_DAYS: "${{ fromJSON(github.event_name == 'workflow_dispatch' && inputs['cutoff-days'] || 75) }}"

jobs:
  scan:
    strategy:
      matrix:
        runner: ${{ fromJSON(github.event_name == 'workflow_dispatch' && inputs.runner || '["ubuntu-latest"]') }}
    runs-on: ${{ matrix.runner }}
    env:
      GH_TOKEN: ${{ secrets.ORG_READ_TOKEN }}
    steps:
      - name: Scan org repos for inactivity (resilient)
        id: scan
        shell: bash
        env:
          DEBUG_404: "false" # flip to "true" to debug 404s
        run: |
          set -euo pipefail

          fail_404() {
            local what="$1" full="$2" rc="$3"
            if [[ "${DEBUG_404}" == "true" ]]; then
              echo "::warning title=404::${what} returned 404 for ${full} (rc=${rc}). Skipping." >&2
            fi
          }

          json_or_empty() {
            # usage: json_or_empty "desc" "org/repo" cmd...
            local desc="$1"; shift
            local full="$1"; shift
            local out rc=0
            if ! out="$("$@" 2>/dev/null)"; then
              rc=$?
              # For Actions, probe with HEAD to confirm 404/access issues
              if [[ "$desc" == "actions runs list" ]]; then
                if ! gh api --method HEAD "/repos/${full}/actions/runs?per_page=1" >/dev/null 2>&1; then
                  fail_404 "$desc" "$full" "$rc"
                  echo ""
                  return 0
                fi
              fi
              fail_404 "$desc" "$full" "$rc"
              echo ""
              return 0
            fi
            printf "%s" "$out"
          }

          # Collect all non-archived repos (paginated)
          repos="$(gh api -q '.[] | select(.archived==false) | .name' "/orgs/$ORG/repos?per_page=100&type=all&page=1" || true)"
          page=2
          while page_repos="$(gh api -q '.[] | select(.archived==false) | .name' "/orgs/$ORG/repos?per_page=100&type=all&page=$page" || true)"; do
            [[ -z "$page_repos" ]] && break
            repos="$repos"$'\n'"$page_repos"
            page=$((page+1))
          done

          now="$(date -u +%s)"
          cutoff=$(( CUTOFF_DAYS * 86400 ))
          warn_list=""

          while IFS= read -r repo; do
            [[ -z "$repo" ]] && continue
            full="$ORG/$repo"

            # Latest Dependabot PR activity (any state)
            last_pr_update="$(
              json_or_empty "dependabot pr list" "$full" \
                gh pr list -R "$full" --author dependabot[bot] --state all --json updatedAt -q '.[].updatedAt'
            )"

            # Latest workflow run of a workflow named "Dependabot Updates"
            wf_runs="$(
              json_or_empty "actions runs list" "$full" \
                gh api -q '.workflow_runs[]?|select(.name=="Dependabot Updates")|.updated_at' "/repos/$full/actions/runs?per_page=100"
            )"

            latest="$(printf "%s\n%s\n" "$last_pr_update" "$wf_runs" | grep -E '.+' | sort -r | head -n1 || true)"

            if [[ -z "$latest" ]]; then
              warn_list+="$full - no Dependabot activity found"$'\n'
              continue
            fi

            latest_s="$(date -u -d "$latest" +%s 2>/dev/null || echo 0)"
            age=$(( now - latest_s ))

            if [[ "$latest_s" -eq 0 || "$age" -ge "$cutoff" ]]; then
              days=$(( age / 86400 ))
              warn_list+="$full - last activity: $latest (${days}d ago)"$'\n'
            fi
          done <<< "$repos"

          {
            echo "warn_list<<EOF"
            printf "%s" "$warn_list"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Dry-run - job summary
        if: ${{ github.event_name == 'workflow_dispatch' && inputs['dry-run'] == true }}
        shell: bash
        run: |
          {
            printf "### Dependabot inactivity report (â‰¥%s days) â€” %s\n\n" "$CUTOFF_DAYS" "$TEAM_HANDLE"
            if [ -z "${{ steps.scan.outputs.warn_list }}" ]; then
              echo "No repos nearing the threshold ðŸŽ‰"
            else
              echo "The following repos may pause soon:"
              echo
              echo '```'
              printf "%s\n" "${{ steps.scan.outputs.warn_list }}"
              echo '```'
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Post issue (real mode)
        if: ${{ github.event_name != 'workflow_dispatch' || inputs['dry-run'] != true }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          if [ -n "${{ steps.scan.outputs.warn_list }}" ]; then
            title="Dependabot inactivity report (â‰¥${CUTOFF_DAYS} days) â€” ${TEAM_HANDLE}"

            # Build the issue body
            body="${TEAM_HANDLE}

          The following repositories are nearing the ${CUTOFF_DAYS}-day Dependabot pause threshold:

          ${{ steps.scan.outputs.warn_list }}"

            # Look for an existing issue with the exact title in the current repo
            existing="$(gh issue list -R "$GITHUB_REPOSITORY" --search "$title in:title" --json number,title -q '.[] | select(.title=="'"$title"'") | .number' | head -n1 || true)"

            if [ -n "${existing:-}" ]; then
              gh issue comment -R "$GITHUB_REPOSITORY" "$existing" --body "$body"
            else
              gh issue create -R "$GITHUB_REPOSITORY" --title "$title" --body "$body" --label "dependencies"
            fi
          fi
